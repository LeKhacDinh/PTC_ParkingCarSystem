#include "main.h"

HardwareSerial mySerial(1);
HardwareSerial SerialPort(2); // Sử dụng UART2

#define FW_VERSION "CP_ESP32.1.0.3" //phiên bản của code
#define FS_VERSION "FS.CP_ESP32.1.0.1" //phiên bản của filesystem

#define SO_GIAY_CUA_1_PHUT  60 //dung de test thuc te la 60
#define LED_DIRECTION  CONST_PRINT_DIRECTION_BOTTOM

String firmwareUpdateServer = "http://gmcom.asia:4003";
const char *filesystemUrl = "http://gmcom.asia:4002/html/about";

uint8_t color= 0;
uint8_t r=0, g=0, b=0;

uint8_t co_xe=0;
uint8_t tg_dau_xe=0;
String tgXeVao = ""; //HH:MM:SS
long testTime = 1367270204;
uint8_t tg_dau_xe_changed = 1;
uint8_t tg_dau_xe_second_changed = 1;

int uart[9];              //save data measured by LiDAR
const int HEADER = 0x59;  //frame header of data package
int dist;      //actual distance measurements of LiDAR
int strength;  //signal strength of LiDAR
float temprature;
unsigned long time1;
int count1 = 0;

hw_timer_t * timer = NULL;

uint8_t seconds = 0;
int waitingSeconds = -1;

Config config;

SHWebServer webserver(WEB_SERVER_PORT);

bool hasResetButton = false;

RTC_DS1307 rtc;
unsigned long epochTime;

void relayOn(){
  digitalWrite(RELAY_PIN, HIGH);
}

void relayOff(){
  digitalWrite(RELAY_PIN, LOW);
}

// Hàm xử lý ngắt thời gian
void IRAM_ATTR onTimer() {
  testTime = testTime + 1;
  if(co_xe){
    if(waitingSeconds>=0){
      waitingSeconds ++;
    }
    seconds = seconds + 1;
    tg_dau_xe_second_changed = 1;
    webserver.setSeconds(seconds);
    if(seconds >= SO_GIAY_CUA_1_PHUT){
      tg_dau_xe = tg_dau_xe + 1;
      tg_dau_xe_changed = 1;
      tg_dau_xe_second_changed = 1;
      seconds = 0;
    }
  }else if(seconds > 0){
    seconds = 0;
  }
}

void displayTime(){
  if(tg_dau_xe_changed == 1){
    String sendData = "";
    //set font size
    sendData += CMD_SET_FONT_3;
    //!3@#^0$12%
    if(co_xe == 0){
      //set color
      sendData += CMD_SET_COLOR + String(GREEN);

      //set position
      sendData += CMD_MOVE_TO_00;

      //set direction
      sendData += CMD_SET_DIRECTION;
      sendData += LED_DIRECTION;
      
      //set data
      sendData += CMD_DATA_BEGIN;
      sendData += "00";
      sendData += CMD_DATA_END;
    }else{
      if(tg_dau_xe < 10 && tg_dau_xe < config.getMaxMinute()){
        //set color
        sendData += CMD_SET_COLOR + String(YELLOW);

        //set position
        sendData += CMD_MOVE_TO_00;

        //set direction
        sendData += CMD_SET_DIRECTION;
        sendData += LED_DIRECTION;
        
        //set data
        sendData += CMD_DATA_BEGIN;
        sendData += "0" + String(tg_dau_xe);
        sendData += CMD_DATA_END;
      }else if(tg_dau_xe < config.getMaxMinute()){
        //set color
        sendData += CMD_SET_COLOR + String(YELLOW);

        //set position
        sendData += CMD_MOVE_TO_00;

        //set direction
        sendData += CMD_SET_DIRECTION;
        sendData += LED_DIRECTION;
        
        //set data
        sendData += CMD_DATA_BEGIN;
        sendData += String(tg_dau_xe);
        sendData += CMD_DATA_END;
      }else{
        if(config.getCanhBao() == 0){
          config.setCanhBao(1);
          relayOn();
        }

        //set color
        sendData += CMD_SET_COLOR + String(RED);

        //set position
        sendData += CMD_MOVE_TO_00;

        //set direction
        sendData += CMD_SET_DIRECTION;
        sendData += LED_DIRECTION;
        
        //set data
        sendData += CMD_DATA_BEGIN;
        if(tg_dau_xe < 10){
          sendData += "0";
        }
        sendData += String(tg_dau_xe);
        sendData += CMD_DATA_END;
      }
    }
    //set color
    sendData += CMD_SET_COLOR + String(RED);

    //set font size
    sendData += CMD_SET_FONT_1;
    //set position
    sendData += CMD_MOVE_TO_XY;
    //font width 6px
    //x = 0
    sendData += char(0+65);
    //y = 25
    sendData += char(25+65);
    //set data
    sendData += CMD_DATA_BEGIN;
    sendData += ("00" + config.getMaLan()).substring(config.getMaLan().length() + 2 - 3);
    sendData += CMD_DATA_END;
    sendDataToLedModule(sendData);
    tg_dau_xe_changed = 0;
  }

  if(tg_dau_xe_second_changed == 1){
    String sendData = "";

    //set font size
    sendData += CMD_SET_FONT_1;

    //!3@#^0$12%
    if(co_xe == 0){
      //khong lam gi het
    }else{
      //delete clear rec if show led slow
      //clear rec
      /*sendData += CMD_CLEAR_REC;
      //x = 0
      sendData += char(0);
      //y = 25
      sendData += char(25);
      //w = 32
      sendData += char(32);
      //h = 7
      sendData += char(7);*/

      //set position
      sendData += CMD_MOVE_TO_XY;
      //font width 6px
      //x = 32 - 13
      sendData += char(19+65);
      //y = 25
      sendData += char(25+65);
      if(tg_dau_xe < config.getMaxMinute()){
        //set color
        sendData += CMD_SET_COLOR + String(YELLOW);

        if(seconds < 10){
          //set data
          sendData += CMD_DATA_BEGIN;
          sendData += "0" + String(seconds);
          sendData += CMD_DATA_END;
        }else{
          //set data
          sendData += CMD_DATA_BEGIN;
          sendData += String(seconds);
          sendData += CMD_DATA_END;
        }
      }else{
        //set color
        sendData += CMD_SET_COLOR + String(RED);

        if(seconds < 10){          
          //set data
          sendData += CMD_DATA_BEGIN;
          sendData += "0" + String(seconds);
          sendData += CMD_DATA_END;
        }else{
          //set data
          sendData += CMD_DATA_BEGIN;
          sendData += String(seconds);
          sendData += CMD_DATA_END;
        }
      }
      sendDataToLedModule(sendData);
    }
    tg_dau_xe_second_changed = 0;
  }
}

// Function to adjust the time based on the timezone offset
DateTime adjustForTimezone(DateTime time, int offsetSeconds) {
    return time + 930 /*+ TimeSpan(offsetSeconds)*/;
}

String getCurrentDate(){
  if(config.getTest() == 1){
    struct tm *timeinfo = localtime(&testTime);
    char buffer[80];
    strftime(buffer, sizeof(buffer), "%d-%m-%Y", timeinfo);
    Serial.println(buffer);
    return String(buffer); 
  }
  DateTime now = adjustForTimezone(rtc.now(), timezoneOffset);
  return to2DecimalChar(now.day()) + "-" + to2DecimalChar(now.month()) + "-" + String(now.year());
}

String getCurrentTime(){
  if(config.getTest() == 1){
    struct tm *timeinfo = localtime(&testTime);
    char buffer[80];
    strftime(buffer, sizeof(buffer), "%H:%M:%S", timeinfo);
    Serial.println(buffer);
    return String(buffer); 
  }
  DateTime now = adjustForTimezone(rtc.now(), timezoneOffset);
  return to2DecimalChar(now.hour())  + ":" + to2DecimalChar(now.minute())  + ":" + to2DecimalChar(now.second());
}

String getCurrentDateTime(){
  if(config.getTest() == 1){
    struct tm *timeinfo = localtime(&testTime);
    char buffer[80];
    strftime(buffer, sizeof(buffer), "%d-%m-%Y %H:%M:%S", timeinfo);
    Serial.println(buffer);
    return String(buffer); 
  }
  DateTime now = adjustForTimezone(rtc.now(), timezoneOffset);

  String currentDate = String(now.year()) + "-" + to2DecimalChar(now.month()) + "-" + to2DecimalChar(now.day())  + " " + to2DecimalChar(now.hour())  + ":" + to2DecimalChar(now.minute())  + ":" + to2DecimalChar(now.second());
  return currentDate;
}

uint32_t getCurrentDateTimeInt(){
  if(config.getTest() == 1){
    return testTime; 
  }
  DateTime now = rtc.now(); //utc
  return now.secondstime();
}

void checkCar(){
  if (mySerial.available()) {         //check if serial port has data input
    if (mySerial.read() == HEADER) {  //assess data package frame header 0x59
      uart[0] = HEADER;
      if (mySerial.read() == HEADER) {  //assess data package frame header 0x59
        uart[1] = HEADER;
        for (int i = 2; i < 9; i++) {  //save data in array
          uart[i] = mySerial.read();
        }
        unsigned char check = uart[0] + uart[1] + uart[2] + uart[3] + uart[4] + uart[5] + uart[6] + uart[7];
        if (uart[8] == (check & 0xff)) {         //verify the received data as per protocol
          dist = uart[2] + uart[3] * 256;        //calculate distance value
          strength = uart[4] + uart[5] * 256;    //calculate signal strength value
          temprature = uart[6] + uart[7] * 256;  //calculate chip temprature
          temprature = temprature / 8 - 256;
        }
      }
    }
  }

  if (millis() - time1 > 5000) {
    DateTime tg = rtc.now();
    Serial.println(getCurrentDateTime());
    Serial.printf("\nDate: %02d:%02d:%02d Time: %02d:%02d:%02d", tg.year(), tg.month(), tg.day(), tg.hour(), tg.minute(), tg.second());
    Serial.print("Dist: ");
    Serial.println(dist);
    if(config.getTest()){
      dist = config.getCurDistance();
    }

    if(dist < config.getMinDistance()){
      time1 = millis();
      return;
    }
    if(dist<=config.getMaxDistance()){
      if(co_xe == 0){
        co_xe = 1;
        waitingSeconds = -1;
        tgXeVao = getCurrentTime();
        tg_dau_xe = 0;
        tg_dau_xe_changed = 1;
        config.setCoXe(co_xe);
        config.setSoPhutDauXe(0);
        config.setCanhBao(0);
        relayOff();
        config.setTgBatDauDauXe(getCurrentDateTimeInt());
        config.setTgKetThucDauXe(getCurrentDateTimeInt());
      }else{
        waitingSeconds = -1;
        config.setSoPhutDauXe(tg_dau_xe);
        config.setCurDistance(dist);
        config.setTgKetThucDauXe(getCurrentDateTimeInt());
        if(tg_dau_xe >= config.getMaxMinute() && config.getCanhBao() == 0){
          config.setCanhBao(1);
          relayOn();
        }
      }
      webserver.setCurDistance(dist);
    }else{
      if(co_xe == 1 && waitingSeconds > config.getMaxWaitSeconds()){
        if(tg_dau_xe>0){
          int h = tg_dau_xe / 60;
          int m = tg_dau_xe % 60;
          String log = "<" + to2DecimalChar(h) + ":" + to2DecimalChar(m) + "><" + tgXeVao + "-" + getCurrentTime() + ">";
          config.addHistory(getCurrentDate(), log);
        }
        co_xe = 0;
        tg_dau_xe = 0;
        tg_dau_xe_changed = 1;
        seconds = 0;
        tgXeVao = "";
        
        config.setCoXe(co_xe);
        config.setCanhBao(0);
        relayOff();
        config.setSoPhutDauXe(0);
        config.setTgBatDauDauXe(0);
        config.setTgKetThucDauXe(0);
        waitingSeconds = -1;
      }else if(co_xe == 1 && waitingSeconds == -1){
        waitingSeconds = 0;
      }

      webserver.setCurDistance(dist);
    }
    time1 = millis();
  }
}

void gotoAccessPointMode(){
  config.setBootMode(BOOT_MODE_ACCESSPOINT);
  ESP.restart();
}

/* Hàm kiểm tra trạng thái của button*/
bool longPress()
{
  static int lastPress = 0;
  if (millis() - lastPress > 10000 && digitalRead(RESET_PIN_BUTTON) == 0)
  { // Nếu button được nhấn và giữ trong 10s thì
    lastPress = millis();
    return true;
  }
  else if (digitalRead(RESET_PIN_BUTTON) == 1)
  {                       // Nếu button không được nhấn và giữ đủ 3s thì
    lastPress = millis(); // gán biến lastPress bằng thời điểm khi gọi hàm
  }
  return false;
}

int* parseIp(String ipAddress){
  String octet;
  int* ipArray = new int[4];
  int i = 0;

  // Parse the IP address string
  for (int j = 0; j < ipAddress.length(); j++) {
    char c = ipAddress[j];
    if (c != '.') {
      octet += c;
    } else {
      ipArray[i++] = octet.toInt(); // Convert string octet to integer
      octet = "";
    }
  }
  ipArray[i] = octet.toInt(); // Convert the last octet to integer
  return ipArray;
}

void setup() {
  Serial.begin(115200);
  SerialPort.begin(115200, SERIAL_8N1, TX_P, RX_P);
  if(!SPIFFS.begin()){
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }
  pinMode(RELAY_PIN, OUTPUT);

  // Thiết lập giao tiếp I2C với các chân tùy chỉnh
  Wire.begin(SDA_PIN, SCL_PIN); // SDA, SCL

  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
  }

  if (!rtc.isrunning()) {
    Serial.println("RTC is NOT running!");
    // Đặt thời gian hiện tại cho RTC chỉ khi RTC không chạy
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
  //rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  
  
  webserver.init();
  webserver.setVersion(FS_VERSION, FW_VERSION);
  config.init();

  Serial.print("Đây là phiên bản: ");
  Serial.println(FW_VERSION);

  Serial.print("getBootMode(): ");
  Serial.println(config.getBootMode());
  if(config.getDeviceId() != NULL && !config.getDeviceId().isEmpty()){
  }else{
    // Get MAC address
    byte mac[6];
    WiFi.macAddress(mac);

    String deviceId ="GSM-LED-" +  Utils::byteToHex(mac, 6);
    config.setDeviceId(deviceId);
  }
  
  if(config.getBootMode() == BOOT_MODE_ACCESSPOINT){
    Serial.print("startAccessPoint");
    webserver.startAccessPoint();
  }else{
    pinMode(RESET_PIN_BUTTON, INPUT_PULLUP);
    if(longPress()){
      Serial.println("Long press");
    }

    if(digitalRead(RESET_PIN_BUTTON) == HIGH){
      hasResetButton = true;
    }
    
    if(config.getIpType() == IP_TYPE_MANUAL){
      int* ipArray = parseIp(config.getIp());
      IPAddress staticIP(ipArray[0], ipArray[1], ipArray[2], ipArray[3]);  // Change this to your desired fixed IP address
      int* gatewayArray = parseIp(config.getGateway());
      IPAddress gateway(gatewayArray[0], gatewayArray[1], gatewayArray[2], gatewayArray[3]);
      int* subnetMaskArray = parseIp(config.getGateway());
      IPAddress subnet(subnetMaskArray[0], subnetMaskArray[1], subnetMaskArray[2], subnetMaskArray[3]); 

      // Configure the static IP address, gateway, and subnet
      WiFi.config(staticIP, gateway, subnet);
      Serial.print("Static IP address set to: ");
      Serial.println(staticIP);
    }

    WiFi.begin(config.getSSID(), config.getPassword());

    long waitingTime = 3000;
    long lastMillis = millis();
    int count = 0;
    bool useDefaultPass = false;
    while (WiFi.status() != WL_CONNECTED)
    {
      if(millis() - lastMillis > waitingTime){
        Serial.println("[WiFi]: Retry");
        lastMillis = millis();
        count++;
        if(count >=5){
          count = 0;
          useDefaultPass = !useDefaultPass;
          if(!useDefaultPass && config.getSSID() != NULL && !config.getSSID().isEmpty()){
            Serial.print("Connected to: ");
            Serial.println(config.getSSID());
            Serial.print("Password: ");
            Serial.println(config.getPassword());
            WiFi.begin(config.getSSID(), config.getPassword());
          }else{
            Serial.print("Connected to default: ");
            Serial.println(STASSID);
            Serial.print("Password: ");
            Serial.println(STAPSK);
            WiFi.begin(STASSID, STAPSK);
          }
        }
      }
      
      if(hasResetButton == false && digitalRead(RESET_PIN_BUTTON) == HIGH){
        hasResetButton = true;
      }
      if(hasResetButton == true && longPress()){
        Serial.println("gotoAccessPointMode...");
        gotoAccessPointMode();
      }
      delay(10);
    }

    Serial.print("IP address set to: ");
    Serial.println(WiFi.localIP());
    if(config.getBootMode() == BOOT_MODE_UPDATE_FW){
      Serial.print("start update firmware");
      config.setBootMode(BOOT_MODE_ACCESSPOINT);
      gotoUpdateFirmware();
      while(1);
    }else if(config.getBootMode() == BOOT_MODE_UPDATE_FILESYSTEM){
      Serial.print("start update filesystem");
      config.setBootMode(BOOT_MODE_ACCESSPOINT);
      gotoUpdateFileSystem();
      while(1);
    }else{
      webserver.startWebServer();
    }
  }
  timer = timerBegin(0, 80, true); // Sử dụng bộ đếm thời gian 0, tốc độ 80MHz, đếm lên
  timerAttachInterrupt(timer, &onTimer, true); // Gắn hàm xử lý ngắt vào bộ đếm thời gian
  timerAlarmWrite(timer, 1*1000000, true); // Thiết lập ngắt mỗi phut: 1 giây (1000000 micro giây), lặp lại
  timerAlarmEnable(timer); // Kích hoạt ngắt

  mySerial.begin(115200, SERIAL_8N1, TF_RX_PIN, TF_TX_PIN);  // Giao tiếp với TFmini Plus, dùng GPIO26 (RX) và GPIO27 (TX)
  time1 = millis();

  Serial.println(getCurrentDateTime());
  //config.clearHistory();
}

void loop() {
  webserver.handleClient();
  /*if(config.getBootMode() != BOOT_MODE_ACCESSPOINT){
    // Handle client requests
    webserver.handleClient();
  }else{
    checkCar();
    displayTime();
  }*/
  checkCar();
  displayTime();
}

void gotoUpdateFirmware(){
  Serial.println("gotoUpdateFirmware ...");
  //todo
  Serial.println("Check update ...");
  //t_httpUpdate_return ret = ESPhttpUpdate.update(wifiClient, firmwareUpdateServer, FW_VERSION);
  t_httpUpdate_return ret = ESPhttpUpdate.update(firmwareUpdateServer, FW_VERSION);
  switch (ret) 
  {
    case HTTP_UPDATE_FAILED:
      Serial.printf("HTTP_UPDATE_FAILD Error (%d): %s", ESPhttpUpdate.getLastError(),
                    ESPhttpUpdate.getLastErrorString().c_str());
      break;
    case HTTP_UPDATE_NO_UPDATES:
      Serial.println("HTTP_UPDATE_NO_UPDATES");
      break;
    case HTTP_UPDATE_OK:
      Serial.println("HTTP_UPDATE_OK");
      break;
  }
  ESP.restart();
}

void gotoUpdateFileSystem(){
  Serial.println("gotoUpdateFileSystem ...");
  Serial.println("Updating filesystem...");
  if (updateFilesystem(filesystemUrl)) {
    Serial.println("Filesystem update successful");
  } else {
    Serial.println("Filesystem update failed");
  }
  ESP.restart();
}

bool updateFilesystem(const char* url) {
  HTTPClient http;
  http.begin(url);

  int httpCode = http.GET();
  if (httpCode != HTTP_CODE_OK) {
    Serial.printf("HTTP GET failed, error: %s\n", http.errorToString(httpCode).c_str());
    http.end();
    return false;
  }

  int contentLength = http.getSize();
  if (contentLength <= 0) {
    Serial.println("Content length is invalid");
    http.end();
    return false;
  }

  WiFiClient *stream = http.getStreamPtr();

  if (!SPIFFS.begin(true)) { // or LittleFS.begin() for LittleFS
    Serial.println("Failed to mount filesystem");
    http.end();
    return false;
  }

  if (!SPIFFS.format()) { // or LittleFS.format() for LittleFS
    Serial.println("Failed to format filesystem");
    http.end();
    return false;
  }

  File f = SPIFFS.open("/html/about.html", "w"); // or LittleFS.open() for LittleFS
  if (!f) {
    Serial.println("Failed to open file for writing");
    http.end();
    return false;
  }

  uint8_t buffer[1024];
  while (http.connected() && (contentLength > 0 || contentLength == -1)) {
    size_t size = stream->available();
    if (size > 0) {
      int c = stream->readBytes(buffer, ((size > sizeof(buffer)) ? sizeof(buffer) : size));
      f.write(buffer, c);
      if (contentLength > 0) {
        contentLength -= c;
      }
    }
    delay(1);
  }

  f.close();
  http.end();

  // Verify the download
  if (SPIFFS.exists("/html/about.html")) { // or LittleFS.exists() for LittleFS
    Serial.println("Filesystem binary downloaded successfully");
    return true;
  } else {
    Serial.println("Filesystem binary download failed");
    return false;
  }
}

void sendDataToLedModule(String data){
  SerialPort.println(data);
}

String to2DecimalChar(int value){
  if(value < 10){
    return "0" + String(value);
  }else{
    return String(value);
  }
}